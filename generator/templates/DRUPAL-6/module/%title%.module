<?php
// $Id$

/**
 * @file %title%.module
 *  %Title% was created by the Drupal generate utility.
 */

/**
 * Implementation of hook_theme()
 */
function %title%_theme($existing, $type, $theme, $path) {
  return array(
    // '%title%' => array(
    //   'template' => '%title%',
    //   'arguments' => array(),
    // ),
  );
}

/**
 * Implementation of hook_imagecache_default_presets()
 */
function %title%_imagecache_default_presets() {
  $presets = array();
  // Put imagecache presets here.
  return $presets;
}

/**
 * Implementation of hook_menu().
 */
function %title%_menu() {
  $items = array();

  $items['admin/settings/%title%'] = array(
    'title' => '%Title%',
    'description' => 'Control the %Title% module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('%title%_admin'),
    'access arguments' => array('access administration pages'),
    'file' => '%title%.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_views_api()
 */
function %title%_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Implementation of hook_views_default_views_alter()
 */
function %title%_views_default_views_alter(&$views) {
  foreach (glob(drupal_get_path('module', '%title%') . '/views/overridden-*.inc') as $file) {
    include($file);
    $views[$view->name] = $view;
  }
}

/**
 * Implementation of hook_context_default_contexts()
 **/
function %title%_context_default_contexts() {
  $contexts = array();

  foreach (glob(drupal_get_path('module', '%title%') . '/contexts/*.inc') as $file) {
    include($file);
    $contexts[] = $context;
  }

  return $contexts;
}

/**
 * Implementation of hook_ctools_plugin_api()
 **/
function %title%_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function %title%_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'view':
      // Create breadcrumbs, add extra content to the $node and perform other
      // routine tasks just before the node is displayed.

      // $breadcrumb = array();
      // $breadcrumb[] = l(t('Home'), NULL);
      // $breadcrumb[] = l('%Title%', '%title%');
      // drupal_set_breadcrumb($breadcrumb);
      //
      // if (!$teaser) {
      //   $node->content['%title%_extra'] = array(
      //     '#value' => '<p>' . t('Extra content for %title% module.') . '</p>',
      //     '#weight' => 100,
      //   );
      // }
      break;

    case 'prepare':
      // The node is about to be shown on the add/edit form.  Modify
      // $node as needed.
      break;

    case 'validate':
      // Validate $node and use the form_set_error() function to display
      // errors to the user.
      break;

    case 'presave':
      // Alter $node before it gets saved into the database
      break;

    case 'update':
      // Update some data into the database, generally relating to $node.
      break;

    case 'insert':
      // Insert some data into the database, generally relating to $node.
      break;

    case 'delete revision':
      // A revision for a node is about to be deleted, remove any dependant
      // records.
      break;

    case 'delete':
      // A node is just about to be deleted, including ALL revisions.  Remove
      // any dependant records from the tables belonging to this module.
      break;

    case 'load':
      // Get some data from the database and return it as an array.
      break;
  }

  return;
}

/**
 * Implementation of hook_form_alter().
 */
function %title%_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_register') {
    // Alter the registration form here.
  }

  // Node page form alters
  if (isset($form['type']) && isset($form['#node'])) {
    if ($form['type']['#value'] .'_node_form' == $form_id) {
      $node = $form['#node'];

      // Alter the node form here.
    }
  }
}

/**
 * Implementation of hook_user()
 **/
function %title%_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'login':
      // The user just logged in.
      break;
    case 'logout':
      // The user just logged out.
      break;
    case 'load':
      // The user just logged out. and insert additional information
      // into the user object. 
      break;
    case 'view':
      // The user's account information is being displayed. The module
      // should format its custom additions for display, and add them
      // to the $account->content array.
      break;
    case 'validate':
      // The user account is about to be modified. The module should
      // validate its custom additions to the user object, registering
      // errors as necessary.
      break;
    case 'insert':
      // The user account is being added. The module should save its
      // custom additions to the user object into the database and
      // set the saved fields to NULL in $edit.
      break;
    case 'update':
      // The user account is being changed. The module should save
      // its custom additions to the user object into the database
      // and set the saved fields to NULL in $edit.
      break;
    case 'delete':
      // The user account is being deleted. The module should remove
      // its custom additions to the user object from the database.
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function %title%_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks['example'] = array(
        'info'  => t('%Title%: Example block'),
        'cache' => BLOCK_CACHE_GLOBAL,
      );
      return $blocks;

    case 'configure':
      $form = array();
      // Add a block configuration form here.
      return $form;

    case 'save':
      // Save values from the block configuration form here, eg:
      // variable_set('%title%_block_' . $delta, $edit['%title%_block_' . $delta]);
      break;

    case 'view':
      switch ($delta) {
        case 'example':
          return array('subject' => t('Example block'), 'content' => "Example content.");
      }
  }
}
