<?php
// $Id$

/**
 * @file %title%.module
 *  %Title% was created by the Drupal generate utility.
 */

/**
 * Implementation of hook_help().
 */
function %title%_help($path, $arg) {
  switch ($path) {
    case 'admin/help#%title%':
      return '<p>'. t('%Title% was created by the Drupal generate utility.') .'</p>';

    case 'admin/content/%title%':
      return '<p>'. t('Administrative help about %Title%.') .'</p>';
  }
}

/**
 * Implementation of hook_theme()
 */
function %title%_theme() {
  return array(
    '%title%_list' => array(
      'template' => '%title%-list',
      'arguments' => array(
        '%title%s' => NULL,
        'parents' => NULL,
        'tid' => NULL
      ),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function %title%_menu() {
  $items = array();

  $items['%title%'] = array(
    'title' => '%Title%s',
    'page callback' => '%title%_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => '%title%.pages.inc',
  );
  $items['admin/settings/%title%'] = array(
    'title' => '%Title% settings',
    'description' => 'Change %title% settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('%title%_admin'),
    'access arguments' => array('administer %title%s'),
    'file' => '%title%.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function %title%_node_info() {
  return array(
    '%title%' => array(
      'name' => t('%Title%'),
      'module' => '%title%',
      'description' => t('Description of the %title% content type.'),
      'title_label' => t('Subject'),
    )
  );
}

/**
 * Implementation of hook_access().
 */
function %title%_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create %title%s', $account);
    case 'update':
      return (user_access('edit own %title%s', $account) && ($account->uid == $node->uid));
    case 'delete':
      return (user_access('delete own %title%s', $account) && ($account->uid == $node->uid));
  }
}

/**
 * Implementation of hook_perm().
 */
function %title%_perm() {
  return array('create %title%s', 'edit own %title%s', 'delete own %title%s', 'administer %title%s');
}

/**
 * Implementation of hook_form().
 */
function %title%_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#default_value' => !empty($node->title) ? $node->title : '',
      '#required' => TRUE,
      '#weight' => -5
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, 1);
  }

  // If needed, assign the %title% submit handler.
  // $form['#submit'][] = '%title%_submit';

  return $form;
}

/**
 * Implementation of hook_validate()
 **/
function %title%_validate($node, &$form) {
  // Check $node for errors and display them to the user with form_set_error()
}

/**
 * Submit handler for %title%_form()
 **/
function %title%_submit($form, &$form_state) {
  // Put the %title% submit handling code here.
}

/**
 * Implementation of hook_load().
 */
function %title%_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {%title%} WHERE vid = %d', $node->vid));

  return $additions;
}

/**
 * Implementation of hook_insert()
 **/
function %title%_insert($node) {
  // TODO: Write insert code here, eg:
  // db_query("INSERT INTO {%title%} (vid, id) VALUES (%d, %d)", $node->vid, 123);
}

/**
 * Implementation of hook_insert()
 **/
function %title%_update($node) {
  // TODO: Write update code here, eg:
  // db_query("UPDATE {%title%} SET id = %d WHERE vid = %d", 321, $node->vid);
}

/**
 * Implementation of hook_insert()
 **/
function %title%_delete($node) {
  // TODO: Write delete ALL revisions code here, eg:
  // db_query("DELETE FROM {%title%} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_nodeapi().
 */
function %title%_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    // Delete revision can only be done in nodeapi.
    case 'delete revision':
      // TODO: Write revision delete code here, eg:
      // db_query("DELETE FROM {%title%} WHERE vid = %d", $node->vid);
      break;
  }
}

/**
 * Implementation of hook_view().
 */
function %title%_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['myfield'] = '<p>' . t('EXAMPLE content.') . '</p>';

  return $node;
}

/**
 * Implementation of hook_block().
 */
function %title%_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['latest_items']['info'] = t('Latest %title% items');
      return $blocks;

    case 'configure':
      $form['%title%_block_num_'. $delta] = array(
        '#type' => 'select',
        '#title' => t('Number of items'),
        '#default_value' => variable_get('%title%_block_num_'. $delta, '5'),
        '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
      );
      return $form;

    case 'save':
      variable_set('%title%_block_num_'. $delta, $edit['%title%_block_num_'. $delta]);
      break;

    case 'view':
      if (!user_access('access content')) {
        return;
      }

      switch ($delta) {
        case 'latest_items':
          $title = t('Latest %title% items');
          $sql = db_rewrite_sql(
            "SELECT nid, title, 
             FROM {node}
             WHERE type = '%s'
             ORDER BY updated DESC"
          );
          $result = db_query_range($sql, '%title%', variable_get('%title%_block_num_' . $delta, '5'));
          $content = node_title_list($result);
          break;
      }

      if (!empty($content)) {
        $block['subject'] = $title;
        $block['content'] = $content . theme('more_link', url('%title%'), t('Read the latest %title% items.'));
        return $block;
      }
  }
}
